--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=25 LPM_WIDTHB=10 LPM_WIDTHP=35 aclr clken clock dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION cycloneive_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneive_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 4 lut 18 
SUBDESIGN mult_2ds
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	dataa[24..0]	:	input;
	datab[9..0]	:	input;
	result[34..0]	:	output;
) 
VARIABLE
	add9_result[17..0]	:	WIRE;
	mac_mult5 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 10,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 7,
			datab_clock = "none",
			datab_width = 10,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out6 : cycloneive_mac_out
		WITH (
			dataa_width = 28,
			output_clock = "0"
		);
	mac_out8 : cycloneive_mac_out
		WITH (
			dataa_width = 17,
			output_clock = "0"
		);
	sft10a[17..0] : soft;
	sft11a[17..0] : soft;
	sft12a[17..0] : soft;
	w570w	: WIRE;
	w643w[35..0]	: WIRE;

BEGIN 
	add9_result[] = sft10a[].out + sft11a[].out;
	mac_mult5.dataa[] = ( dataa[17..0]);
	mac_mult5.datab[] = ( datab[9..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult7.dataa[] = ( dataa[24..18]);
	mac_mult7.datab[] = ( datab[9..0]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"0";
	mac_out6.aclr = aclr;
	mac_out6.clk = clock;
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out6.ena = clken;
	mac_out8.aclr = aclr;
	mac_out8.clk = clock;
	mac_out8.dataa[] = mac_mult7.dataout[];
	mac_out8.ena = clken;
	sft10a[].in = ( w570w, ( mac_out8.dataout[16..16], ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..18])))))))))))))))));
	sft11a[].in = ( w570w, ( w570w, ( w570w, ( w570w, ( w570w, ( w570w, ( w570w, ( w570w, ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..0])))))))))))))))));
	sft12a[].in = add9_result[];
	result[34..0] = w643w[34..0];
	w570w = B"0";
	w643w[] = ( sft12a[17..16].out, sft12a[15..14].out, sft12a[13..12].out, sft12a[11..10].out, sft12a[9..8].out, sft12a[7..6].out, sft12a[5..4].out, sft12a[3..2].out, sft12a[1..0].out, mac_out6.dataout[17..17], mac_out6.dataout[16..16], mac_out6.dataout[15..15], mac_out6.dataout[14..14], mac_out6.dataout[13..13], mac_out6.dataout[12..12], mac_out6.dataout[11..11], mac_out6.dataout[10..10], mac_out6.dataout[9..9], mac_out6.dataout[8..8], mac_out6.dataout[7..7], mac_out6.dataout[6..6], mac_out6.dataout[5..5], mac_out6.dataout[4..4], mac_out6.dataout[3..3], mac_out6.dataout[2..2], mac_out6.dataout[1..1], mac_out6.dataout[0..0]);
END;
--VALID FILE
