--altfp_div_pst CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" FILE_NAME="altfp_div_out.tdf" PIPELINE=6 WIDTH_EXP=8 WIDTH_MAN=23 aclr clk_en clock dataa datab result
--VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:24:SJ cbx_altfp_div 2018:09:12:13:04:24:SJ cbx_altsyncram 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_abs 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_lpm_divide 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_lpm_mux 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_stratixiii 2018:09:12:13:04:24:SJ cbx_stratixv 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION altsyncram_4op (address_a[8..0], clock0, clocken0)
RETURNS ( q_a[8..0]);
FUNCTION mult_2ds (aclr, clken, clock, dataa[24..0], datab[9..0])
RETURNS ( result[34..0]);
FUNCTION mult_0ds (aclr, clken, clock, dataa[23..0], datab[9..0])
RETURNS ( result[33..0]);
FUNCTION mult_9ds (aclr, clken, clock, dataa[16..0], datab[16..0])
RETURNS ( result[33..0]);
FUNCTION mult_7ds (aclr, clken, clock, dataa[33..0], datab[16..0])
RETURNS ( result[50..0]);

--synthesis_resources = lut 125 M9K 1 mux21 74 reg 339 
SUBDESIGN altfp_div_pst_ftg
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	dataa[31..0]	:	input;
	datab[31..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE 
	altsyncram3 : altsyncram_4op;
	a_is_infinity_dffe_0 : dffe;
	a_is_infinity_dffe_1 : dffe;
	a_is_infinity_dffe_2 : dffe;
	a_is_infinity_dffe_3 : dffe;
	a_is_infinity_dffe_4 : dffe;
	a_zero_b_not_dffe_0 : dffe;
	a_zero_b_not_dffe_1 : dffe;
	a_zero_b_not_dffe_2 : dffe;
	a_zero_b_not_dffe_3 : dffe;
	a_zero_b_not_dffe_4 : dffe;
	b1_dffe_0a[33..0] : dffe;
	b_is_infinity_dffe_0 : dffe;
	b_is_infinity_dffe_1 : dffe;
	b_is_infinity_dffe_2 : dffe;
	b_is_infinity_dffe_3 : dffe;
	b_is_infinity_dffe_4 : dffe;
	both_exp_zeros_dffe : dffe;
	divbyzero_pipe_dffe_0 : dffe;
	divbyzero_pipe_dffe_1 : dffe;
	divbyzero_pipe_dffe_2 : dffe;
	divbyzero_pipe_dffe_3 : dffe;
	divbyzero_pipe_dffe_4 : dffe;
	e1_dffe_0a[16..0] : dffe;
	e1_dffe_1a[16..0] : dffe;
	exp_result_dffe_0a[7..0] : dffe;
	exp_result_dffe_1a[7..0] : dffe;
	exp_result_dffe_2a[7..0] : dffe;
	exp_result_dffe_3a[7..0] : dffe;
	frac_a_smaller_dffe1 : dffe;
	man_a_dffe1_dffe1a[22..0] : dffe;
	man_b_dffe1_dffe1a[22..0] : dffe;
	man_result_dffe[22..0] : dffe;
	nan_pipe_dffe_0 : dffe;
	nan_pipe_dffe_1 : dffe;
	nan_pipe_dffe_2 : dffe;
	nan_pipe_dffe_3 : dffe;
	nan_pipe_dffe_4 : dffe;
	over_under_dffe_0 : dffe;
	over_under_dffe_1 : dffe;
	over_under_dffe_2 : dffe;
	quotient_j_dffe[16..0] : dffe;
	quotient_k_dffe_0a[16..0] : dffe;
	remainder_j_dffe_0a[49..0] : dffe;
	remainder_j_dffe_1a[49..0] : dffe;
	sign_pipe_dffe_0 : dffe;
	sign_pipe_dffe_1 : dffe;
	sign_pipe_dffe_2 : dffe;
	sign_pipe_dffe_3 : dffe;
	sign_pipe_dffe_4 : dffe;
	sign_pipe_dffe_5 : dffe;
	bias_addition_pipeline_dffe[8..0]	:	DFFE
		WITH (
			power_up ="low"
		);
	bias_addition_overflow_dffe[8..0]	:	DFFE
		WITH (
			power_up ="low"
		);
	bias_addition_result_int[8..0]	:	WIRE;
	bias_addition_aclr	:	WIRE;
	bias_addition_clken	:	WIRE;
	bias_addition_clock	:	WIRE;
	bias_addition_dataa[8..0]	:	WIRE;
	bias_addition_datab[8..0]	:	WIRE;
	bias_addition_overflow	:	WIRE;
	bias_addition_result[8..0]	:	WIRE;
	exp_sub_pipeline_dffe[8..0]	:	DFFE
		WITH (
			power_up ="low"
		);
	exp_sub_result_int[8..0]	:	WIRE;
	exp_sub_aclr	:	WIRE;
	exp_sub_clken	:	WIRE;
	exp_sub_clock	:	WIRE;
	exp_sub_dataa[8..0]	:	WIRE;
	exp_sub_datab[8..0]	:	WIRE;
	exp_sub_result[8..0]	:	WIRE;
	quotient_process_result_int[31..0]	:	WIRE;
	quotient_process_cin	:	WIRE;
	quotient_process_dataa[30..0]	:	WIRE;
	quotient_process_datab[30..0]	:	WIRE;
	quotient_process_result[30..0]	:	WIRE;
	remainder_sub_0_dataa[49..0]	:	WIRE;
	remainder_sub_0_datab[49..0]	:	WIRE;
	remainder_sub_0_result[49..0]	:	WIRE;
	cmpr2_alb_int	:	WIRE;
	cmpr2_alb	:	WIRE;
	cmpr2_dataa[22..0]	:	WIRE;
	cmpr2_datab[22..0]	:	WIRE;
	a1_prod : mult_2ds;
	b1_prod : mult_0ds;
	q_partial_0 : mult_9ds;
	q_partial_1 : mult_9ds;
	remainder_mult_0 : mult_7ds;
	exp_result_muxa_dataout[7..0]	:	WIRE;
	man_a_adjusteda_dataout[24..0]	:	WIRE;
	man_result_muxa_dataout[22..0]	:	WIRE;
	select_bias_2a_dataout[8..0]	:	WIRE;
	select_biasa_dataout[8..0]	:	WIRE;
	a_is_infinity_w	: WIRE;
	a_is_nan_w	: WIRE;
	a_zero_b_not	: WIRE;
	b1_dffe_w[33..0]	: WIRE;
	b_is_infinity_w	: WIRE;
	b_is_nan_w	: WIRE;
	bias_addition_overf_w	: WIRE;
	bias_addition_w[7..0]	: WIRE;
	both_exp_zeros	: WIRE;
	e0_dffe1_wo[8..0]	: WIRE;
	e0_w[8..0]	: WIRE;
	e1_w[50..0]	: WIRE;
	exp_a_all_one_w[7..0]	: WIRE;
	exp_a_not_zero_w[7..0]	: WIRE;
	exp_add_output_all_one[7..0]	: WIRE;
	exp_add_output_not_zero[7..0]	: WIRE;
	exp_b_all_one_w[7..0]	: WIRE;
	exp_b_not_zero_w[7..0]	: WIRE;
	exp_result_mux_out[7..0]	: WIRE;
	exp_result_mux_sel_w	: WIRE;
	exp_result_w[7..0]	: WIRE;
	exp_sign_w	: WIRE;
	exp_sub_a_w[8..0]	: WIRE;
	exp_sub_b_w[8..0]	: WIRE;
	exp_sub_w[8..0]	: WIRE;
	frac_a_smaller_dffe1_wi	: WIRE;
	frac_a_smaller_dffe1_wo	: WIRE;
	frac_a_smaller_w	: WIRE;
	guard_bit	: WIRE;
	man_a_adjusted_w[24..0]	: WIRE;
	man_a_dffe1_wi[22..0]	: WIRE;
	man_a_dffe1_wo[22..0]	: WIRE;
	man_a_not_zero_w[22..0]	: WIRE;
	man_b_adjusted_w[23..0]	: WIRE;
	man_b_dffe1_wi[22..0]	: WIRE;
	man_b_dffe1_wo[22..0]	: WIRE;
	man_b_not_zero_w[22..0]	: WIRE;
	man_result_dffe_wi[22..0]	: WIRE;
	man_result_dffe_wo[22..0]	: WIRE;
	man_result_mux_select	: WIRE;
	man_result_w[22..0]	: WIRE;
	man_zeros_w[22..0]	: WIRE;
	overflow_ones_w[7..0]	: WIRE;
	overflow_underflow	: WIRE;
	overflow_w	: WIRE;
	quotient_accumulate_w[61..0]	: WIRE;
	quotient_process_cin_w	: WIRE;
	remainder_j_w[99..0]	: WIRE;
	round_bit	: WIRE;
	select_bias_out_2_w[8..0]	: WIRE;
	select_bias_out_w[8..0]	: WIRE;
	sticky_bits[4..0]	: WIRE;
	underflow_w	: WIRE;
	underflow_zeros_w[7..0]	: WIRE;
	value_add_one_w[8..0]	: WIRE;
	value_normal_w[8..0]	: WIRE;
	value_zero_w[8..0]	: WIRE;

BEGIN 
	altsyncram3.address_a[8..0] = datab[22..14];
	altsyncram3.clock0 = clock;
	altsyncram3.clocken0 = clk_en;
	a_is_infinity_dffe_0.clk = clock;
	a_is_infinity_dffe_0.clrn = (! aclr);
	a_is_infinity_dffe_0.d = a_is_infinity_w;
	a_is_infinity_dffe_0.ena = clk_en;
	a_is_infinity_dffe_1.clk = clock;
	a_is_infinity_dffe_1.clrn = (! aclr);
	a_is_infinity_dffe_1.d = a_is_infinity_dffe_0.q;
	a_is_infinity_dffe_1.ena = clk_en;
	a_is_infinity_dffe_2.clk = clock;
	a_is_infinity_dffe_2.clrn = (! aclr);
	a_is_infinity_dffe_2.d = a_is_infinity_dffe_1.q;
	a_is_infinity_dffe_2.ena = clk_en;
	a_is_infinity_dffe_3.clk = clock;
	a_is_infinity_dffe_3.clrn = (! aclr);
	a_is_infinity_dffe_3.d = a_is_infinity_dffe_2.q;
	a_is_infinity_dffe_3.ena = clk_en;
	a_is_infinity_dffe_4.clk = clock;
	a_is_infinity_dffe_4.clrn = (! aclr);
	a_is_infinity_dffe_4.d = a_is_infinity_dffe_3.q;
	a_is_infinity_dffe_4.ena = clk_en;
	a_zero_b_not_dffe_0.clk = clock;
	a_zero_b_not_dffe_0.clrn = (! aclr);
	a_zero_b_not_dffe_0.d = a_zero_b_not;
	a_zero_b_not_dffe_0.ena = clk_en;
	a_zero_b_not_dffe_1.clk = clock;
	a_zero_b_not_dffe_1.clrn = (! aclr);
	a_zero_b_not_dffe_1.d = a_zero_b_not_dffe_0.q;
	a_zero_b_not_dffe_1.ena = clk_en;
	a_zero_b_not_dffe_2.clk = clock;
	a_zero_b_not_dffe_2.clrn = (! aclr);
	a_zero_b_not_dffe_2.d = a_zero_b_not_dffe_1.q;
	a_zero_b_not_dffe_2.ena = clk_en;
	a_zero_b_not_dffe_3.clk = clock;
	a_zero_b_not_dffe_3.clrn = (! aclr);
	a_zero_b_not_dffe_3.d = a_zero_b_not_dffe_2.q;
	a_zero_b_not_dffe_3.ena = clk_en;
	a_zero_b_not_dffe_4.clk = clock;
	a_zero_b_not_dffe_4.clrn = (! aclr);
	a_zero_b_not_dffe_4.d = a_zero_b_not_dffe_3.q;
	a_zero_b_not_dffe_4.ena = clk_en;
	b1_dffe_0a[].clk = clock;
	b1_dffe_0a[].clrn = (! aclr);
	b1_dffe_0a[].d = b1_prod.result[];
	b1_dffe_0a[].ena = clk_en;
	b_is_infinity_dffe_0.clk = clock;
	b_is_infinity_dffe_0.clrn = (! aclr);
	b_is_infinity_dffe_0.d = b_is_infinity_w;
	b_is_infinity_dffe_0.ena = clk_en;
	b_is_infinity_dffe_1.clk = clock;
	b_is_infinity_dffe_1.clrn = (! aclr);
	b_is_infinity_dffe_1.d = b_is_infinity_dffe_0.q;
	b_is_infinity_dffe_1.ena = clk_en;
	b_is_infinity_dffe_2.clk = clock;
	b_is_infinity_dffe_2.clrn = (! aclr);
	b_is_infinity_dffe_2.d = b_is_infinity_dffe_1.q;
	b_is_infinity_dffe_2.ena = clk_en;
	b_is_infinity_dffe_3.clk = clock;
	b_is_infinity_dffe_3.clrn = (! aclr);
	b_is_infinity_dffe_3.d = b_is_infinity_dffe_2.q;
	b_is_infinity_dffe_3.ena = clk_en;
	b_is_infinity_dffe_4.clk = clock;
	b_is_infinity_dffe_4.clrn = (! aclr);
	b_is_infinity_dffe_4.d = b_is_infinity_dffe_3.q;
	b_is_infinity_dffe_4.ena = clk_en;
	both_exp_zeros_dffe.clk = clock;
	both_exp_zeros_dffe.clrn = (! aclr);
	both_exp_zeros_dffe.d = ((! exp_b_not_zero_w[7..7]) & (! exp_a_not_zero_w[7..7]));
	both_exp_zeros_dffe.ena = clk_en;
	divbyzero_pipe_dffe_0.clk = clock;
	divbyzero_pipe_dffe_0.clrn = (! aclr);
	divbyzero_pipe_dffe_0.d = ((((! exp_b_not_zero_w[7..7]) & (! a_is_nan_w)) & exp_a_not_zero_w[7..7]) & (! a_is_infinity_w));
	divbyzero_pipe_dffe_0.ena = clk_en;
	divbyzero_pipe_dffe_1.clk = clock;
	divbyzero_pipe_dffe_1.clrn = (! aclr);
	divbyzero_pipe_dffe_1.d = divbyzero_pipe_dffe_0.q;
	divbyzero_pipe_dffe_1.ena = clk_en;
	divbyzero_pipe_dffe_2.clk = clock;
	divbyzero_pipe_dffe_2.clrn = (! aclr);
	divbyzero_pipe_dffe_2.d = divbyzero_pipe_dffe_1.q;
	divbyzero_pipe_dffe_2.ena = clk_en;
	divbyzero_pipe_dffe_3.clk = clock;
	divbyzero_pipe_dffe_3.clrn = (! aclr);
	divbyzero_pipe_dffe_3.d = divbyzero_pipe_dffe_2.q;
	divbyzero_pipe_dffe_3.ena = clk_en;
	divbyzero_pipe_dffe_4.clk = clock;
	divbyzero_pipe_dffe_4.clrn = (! aclr);
	divbyzero_pipe_dffe_4.d = divbyzero_pipe_dffe_3.q;
	divbyzero_pipe_dffe_4.ena = clk_en;
	e1_dffe_0a[].clk = clock;
	e1_dffe_0a[].clrn = (! aclr);
	e1_dffe_0a[].d = e1_w[16..0];
	e1_dffe_0a[].ena = clk_en;
	e1_dffe_1a[].clk = clock;
	e1_dffe_1a[].clrn = (! aclr);
	e1_dffe_1a[].d = e1_w[33..17];
	e1_dffe_1a[].ena = clk_en;
	exp_result_dffe_0a[].clk = clock;
	exp_result_dffe_0a[].clrn = (! aclr);
	exp_result_dffe_0a[].d = exp_result_mux_out[];
	exp_result_dffe_0a[].ena = clk_en;
	exp_result_dffe_1a[].clk = clock;
	exp_result_dffe_1a[].clrn = (! aclr);
	exp_result_dffe_1a[].d = exp_result_dffe_0a[].q;
	exp_result_dffe_1a[].ena = clk_en;
	exp_result_dffe_2a[].clk = clock;
	exp_result_dffe_2a[].clrn = (! aclr);
	exp_result_dffe_2a[].d = exp_result_dffe_1a[].q;
	exp_result_dffe_2a[].ena = clk_en;
	exp_result_dffe_3a[].clk = clock;
	exp_result_dffe_3a[].clrn = (! aclr);
	exp_result_dffe_3a[].d = exp_result_dffe_2a[].q;
	exp_result_dffe_3a[].ena = clk_en;
	frac_a_smaller_dffe1.clk = clock;
	frac_a_smaller_dffe1.clrn = (! aclr);
	frac_a_smaller_dffe1.d = frac_a_smaller_dffe1_wi;
	frac_a_smaller_dffe1.ena = clk_en;
	man_a_dffe1_dffe1a[].clk = clock;
	man_a_dffe1_dffe1a[].clrn = (! aclr);
	man_a_dffe1_dffe1a[].d = man_a_dffe1_wi[];
	man_a_dffe1_dffe1a[].ena = clk_en;
	man_b_dffe1_dffe1a[].clk = clock;
	man_b_dffe1_dffe1a[].clrn = (! aclr);
	man_b_dffe1_dffe1a[].d = man_b_dffe1_wi[];
	man_b_dffe1_dffe1a[].ena = clk_en;
	man_result_dffe[].clk = clock;
	man_result_dffe[].clrn = (! aclr);
	man_result_dffe[].d = man_result_dffe_wi[];
	man_result_dffe[].ena = clk_en;
	nan_pipe_dffe_0.clk = clock;
	nan_pipe_dffe_0.clrn = (! aclr);
	nan_pipe_dffe_0.d = (((a_is_nan_w # b_is_nan_w) # (a_is_infinity_w & b_is_infinity_w)) # ((! exp_a_not_zero_w[7..7]) & (! exp_b_not_zero_w[7..7])));
	nan_pipe_dffe_0.ena = clk_en;
	nan_pipe_dffe_1.clk = clock;
	nan_pipe_dffe_1.clrn = (! aclr);
	nan_pipe_dffe_1.d = nan_pipe_dffe_0.q;
	nan_pipe_dffe_1.ena = clk_en;
	nan_pipe_dffe_2.clk = clock;
	nan_pipe_dffe_2.clrn = (! aclr);
	nan_pipe_dffe_2.d = nan_pipe_dffe_1.q;
	nan_pipe_dffe_2.ena = clk_en;
	nan_pipe_dffe_3.clk = clock;
	nan_pipe_dffe_3.clrn = (! aclr);
	nan_pipe_dffe_3.d = nan_pipe_dffe_2.q;
	nan_pipe_dffe_3.ena = clk_en;
	nan_pipe_dffe_4.clk = clock;
	nan_pipe_dffe_4.clrn = (! aclr);
	nan_pipe_dffe_4.d = nan_pipe_dffe_3.q;
	nan_pipe_dffe_4.ena = clk_en;
	over_under_dffe_0.clk = clock;
	over_under_dffe_0.clrn = (! aclr);
	over_under_dffe_0.d = overflow_underflow;
	over_under_dffe_0.ena = clk_en;
	over_under_dffe_1.clk = clock;
	over_under_dffe_1.clrn = (! aclr);
	over_under_dffe_1.d = over_under_dffe_0.q;
	over_under_dffe_1.ena = clk_en;
	over_under_dffe_2.clk = clock;
	over_under_dffe_2.clrn = (! aclr);
	over_under_dffe_2.d = over_under_dffe_1.q;
	over_under_dffe_2.ena = clk_en;
	quotient_j_dffe[].clk = clock;
	quotient_j_dffe[].clrn = (! aclr);
	quotient_j_dffe[].d = q_partial_0.result[32..16];
	quotient_j_dffe[].ena = clk_en;
	quotient_k_dffe_0a[].clk = clock;
	quotient_k_dffe_0a[].clrn = (! aclr);
	quotient_k_dffe_0a[].d = quotient_accumulate_w[30..14];
	quotient_k_dffe_0a[].ena = clk_en;
	remainder_j_dffe_0a[].clk = clock;
	remainder_j_dffe_0a[].clrn = (! aclr);
	remainder_j_dffe_0a[].d = remainder_j_w[49..0];
	remainder_j_dffe_0a[].ena = clk_en;
	remainder_j_dffe_1a[].clk = clock;
	remainder_j_dffe_1a[].clrn = (! aclr);
	remainder_j_dffe_1a[].d = remainder_j_dffe_0a[].q;
	remainder_j_dffe_1a[].ena = clk_en;
	sign_pipe_dffe_0.clk = clock;
	sign_pipe_dffe_0.clrn = (! aclr);
	sign_pipe_dffe_0.d = (dataa[31..31] $ datab[31..31]);
	sign_pipe_dffe_0.ena = clk_en;
	sign_pipe_dffe_1.clk = clock;
	sign_pipe_dffe_1.clrn = (! aclr);
	sign_pipe_dffe_1.d = sign_pipe_dffe_0.q;
	sign_pipe_dffe_1.ena = clk_en;
	sign_pipe_dffe_2.clk = clock;
	sign_pipe_dffe_2.clrn = (! aclr);
	sign_pipe_dffe_2.d = sign_pipe_dffe_1.q;
	sign_pipe_dffe_2.ena = clk_en;
	sign_pipe_dffe_3.clk = clock;
	sign_pipe_dffe_3.clrn = (! aclr);
	sign_pipe_dffe_3.d = sign_pipe_dffe_2.q;
	sign_pipe_dffe_3.ena = clk_en;
	sign_pipe_dffe_4.clk = clock;
	sign_pipe_dffe_4.clrn = (! aclr);
	sign_pipe_dffe_4.d = sign_pipe_dffe_3.q;
	sign_pipe_dffe_4.ena = clk_en;
	sign_pipe_dffe_5.clk = clock;
	sign_pipe_dffe_5.clrn = (! aclr);
	sign_pipe_dffe_5.d = sign_pipe_dffe_4.q;
	sign_pipe_dffe_5.ena = clk_en;
	bias_addition_result_int[] = bias_addition_dataa[] + bias_addition_datab[];
	bias_addition_pipeline_dffe[].clk = bias_addition_clock;
	bias_addition_pipeline_dffe[].clrn = !bias_addition_aclr;
	bias_addition_pipeline_dffe[].ena = bias_addition_clken;
	bias_addition_overflow_dffe[].clk = bias_addition_clock;
	bias_addition_overflow_dffe[].clrn = !bias_addition_aclr;
	bias_addition_overflow_dffe[].ena = bias_addition_clken;
	bias_addition_result[] = bias_addition_pipeline_dffe[8..0].q;
	bias_addition_pipeline_dffe[8..0].d = bias_addition_result_int[];
	bias_addition_overflow = bias_addition_overflow_dffe[0..0].q;
	bias_addition_overflow_dffe[0].d = ! (bias_addition_dataa[8] $ bias_addition_datab[8]) & (bias_addition_dataa[8] $ bias_addition_result_int[8]);
	bias_addition_aclr = aclr;
	bias_addition_clken = clk_en;
	bias_addition_clock = clock;
	bias_addition_dataa[] = exp_sub_w[];
	bias_addition_datab[] = select_bias_out_2_w[];
	exp_sub_result_int[] = exp_sub_dataa[] - exp_sub_datab[];
	exp_sub_pipeline_dffe[].clk = exp_sub_clock;
	exp_sub_pipeline_dffe[].clrn = !exp_sub_aclr;
	exp_sub_pipeline_dffe[].ena = exp_sub_clken;
	exp_sub_result[] = exp_sub_pipeline_dffe[8..0].q;
	exp_sub_pipeline_dffe[8..0].d = exp_sub_result_int[];
	exp_sub_aclr = aclr;
	exp_sub_clken = clk_en;
	exp_sub_clock = clock;
	exp_sub_dataa[] = exp_sub_a_w[];
	exp_sub_datab[] = exp_sub_b_w[];
	quotient_process_result_int[] = (quotient_process_dataa[], quotient_process_cin) + (quotient_process_datab[], quotient_process_cin);
	quotient_process_result[] = quotient_process_result_int[31..1];
	quotient_process_cin = quotient_process_cin_w;
	quotient_process_dataa[] = ( quotient_accumulate_w[61..45], B"00000000000000");
	quotient_process_datab[] = ( B"00000000000000", q_partial_1.result[32..22], B"111111");
	remainder_sub_0_result[] = remainder_sub_0_dataa[] - remainder_sub_0_datab[];
	remainder_sub_0_dataa[] = ( remainder_j_dffe_1a[49..15].q, B"000000000000000");
	remainder_sub_0_datab[] = remainder_mult_0.result[49..0];
	IF (cmpr2_dataa[] < cmpr2_datab[]) THEN
		cmpr2_alb_int = VCC;
	ELSE
		cmpr2_alb_int = GND;
	END IF;
	cmpr2_alb = cmpr2_alb_int;
	cmpr2_dataa[] = dataa[22..0];
	cmpr2_datab[] = datab[22..0];
	a1_prod.aclr = aclr;
	a1_prod.clken = clk_en;
	a1_prod.clock = clock;
	a1_prod.dataa[] = man_a_adjusted_w[];
	a1_prod.datab[] = ( B"1", e0_dffe1_wo[]);
	b1_prod.aclr = aclr;
	b1_prod.clken = clk_en;
	b1_prod.clock = clock;
	b1_prod.dataa[] = man_b_adjusted_w[];
	b1_prod.datab[] = ( B"1", e0_dffe1_wo[]);
	q_partial_0.aclr = aclr;
	q_partial_0.clken = clk_en;
	q_partial_0.clock = clock;
	q_partial_0.dataa[16..0] = remainder_j_w[49..33];
	q_partial_0.datab[16..0] = e1_w[16..0];
	q_partial_1.aclr = aclr;
	q_partial_1.clken = clk_en;
	q_partial_1.clock = clock;
	q_partial_1.dataa[16..0] = remainder_j_w[99..83];
	q_partial_1.datab[16..0] = e1_w[50..34];
	remainder_mult_0.aclr = aclr;
	remainder_mult_0.clken = clk_en;
	remainder_mult_0.clock = clock;
	remainder_mult_0.dataa[33..0] = b1_dffe_w[33..0];
	remainder_mult_0.datab[16..0] = q_partial_0.result[32..16];
	exp_result_muxa_dataout[] = exp_result_mux_sel_w & underflow_zeros_w[] # !(exp_result_mux_sel_w) & exp_result_w[];
	man_a_adjusteda_dataout[] = frac_a_smaller_dffe1_wo & ( B"1", man_a_dffe1_wo[], B"0") # !(frac_a_smaller_dffe1_wo) & ( B"0", B"1", man_a_dffe1_wo[]);
	man_result_muxa_dataout[] = man_result_mux_select & ( nan_pipe_dffe_4.q, man_zeros_w[21..0]) # !(man_result_mux_select) & quotient_process_result[28..6];
	select_bias_2a_dataout[] = both_exp_zeros & value_zero_w[] # !(both_exp_zeros) & select_bias_out_w[];
	select_biasa_dataout[] = frac_a_smaller_dffe1_wo & value_normal_w[] # !(frac_a_smaller_dffe1_wo) & value_add_one_w[];
	a_is_infinity_w = (exp_a_all_one_w[7..7] & (! man_a_not_zero_w[22..22]));
	a_is_nan_w = (exp_a_all_one_w[7..7] & man_a_not_zero_w[22..22]);
	a_zero_b_not = (exp_b_not_zero_w[7..7] & (! exp_a_not_zero_w[7..7]));
	b1_dffe_w[] = ( b1_dffe_0a[].q);
	b_is_infinity_w = (exp_b_all_one_w[7..7] & (! man_b_not_zero_w[22..22]));
	b_is_nan_w = (exp_b_all_one_w[7..7] & man_b_not_zero_w[22..22]);
	bias_addition_overf_w = bias_addition_overflow;
	bias_addition_w[7..0] = bias_addition_result[7..0];
	both_exp_zeros = both_exp_zeros_dffe.q;
	e0_dffe1_wo[] = e0_w[];
	e0_w[] = altsyncram3.q_a[];
	e1_w[] = ( e1_dffe_1a[].q, e1_dffe_0a[].q, (! b1_prod.result[33..17]));
	exp_a_all_one_w[] = ( (dataa[30..30] & exp_a_all_one_w[6..6]), (dataa[29..29] & exp_a_all_one_w[5..5]), (dataa[28..28] & exp_a_all_one_w[4..4]), (dataa[27..27] & exp_a_all_one_w[3..3]), (dataa[26..26] & exp_a_all_one_w[2..2]), (dataa[25..25] & exp_a_all_one_w[1..1]), (dataa[24..24] & exp_a_all_one_w[0..0]), dataa[23..23]);
	exp_a_not_zero_w[] = ( (dataa[30..30] # exp_a_not_zero_w[6..6]), (dataa[29..29] # exp_a_not_zero_w[5..5]), (dataa[28..28] # exp_a_not_zero_w[4..4]), (dataa[27..27] # exp_a_not_zero_w[3..3]), (dataa[26..26] # exp_a_not_zero_w[2..2]), (dataa[25..25] # exp_a_not_zero_w[1..1]), (dataa[24..24] # exp_a_not_zero_w[0..0]), dataa[23..23]);
	exp_add_output_all_one[] = ( (bias_addition_w[7..7] & exp_add_output_all_one[6..6]), (bias_addition_w[6..6] & exp_add_output_all_one[5..5]), (bias_addition_w[5..5] & exp_add_output_all_one[4..4]), (bias_addition_w[4..4] & exp_add_output_all_one[3..3]), (bias_addition_w[3..3] & exp_add_output_all_one[2..2]), (bias_addition_w[2..2] & exp_add_output_all_one[1..1]), (bias_addition_w[1..1] & exp_add_output_all_one[0..0]), bias_addition_w[0..0]);
	exp_add_output_not_zero[] = ( (bias_addition_w[7..7] # exp_add_output_not_zero[6..6]), (bias_addition_w[6..6] # exp_add_output_not_zero[5..5]), (bias_addition_w[5..5] # exp_add_output_not_zero[4..4]), (bias_addition_w[4..4] # exp_add_output_not_zero[3..3]), (bias_addition_w[3..3] # exp_add_output_not_zero[2..2]), (bias_addition_w[2..2] # exp_add_output_not_zero[1..1]), (bias_addition_w[1..1] # exp_add_output_not_zero[0..0]), bias_addition_w[0..0]);
	exp_b_all_one_w[] = ( (datab[30..30] & exp_b_all_one_w[6..6]), (datab[29..29] & exp_b_all_one_w[5..5]), (datab[28..28] & exp_b_all_one_w[4..4]), (datab[27..27] & exp_b_all_one_w[3..3]), (datab[26..26] & exp_b_all_one_w[2..2]), (datab[25..25] & exp_b_all_one_w[1..1]), (datab[24..24] & exp_b_all_one_w[0..0]), datab[23..23]);
	exp_b_not_zero_w[] = ( (datab[30..30] # exp_b_not_zero_w[6..6]), (datab[29..29] # exp_b_not_zero_w[5..5]), (datab[28..28] # exp_b_not_zero_w[4..4]), (datab[27..27] # exp_b_not_zero_w[3..3]), (datab[26..26] # exp_b_not_zero_w[2..2]), (datab[25..25] # exp_b_not_zero_w[1..1]), (datab[24..24] # exp_b_not_zero_w[0..0]), datab[23..23]);
	exp_result_mux_out[] = exp_result_muxa_dataout[];
	exp_result_mux_sel_w = ((((a_zero_b_not_dffe_1.q # b_is_infinity_dffe_1.q) # ((! bias_addition_overf_w) & exp_sign_w)) # (((! exp_add_output_not_zero[7..7]) & (! bias_addition_overf_w)) & (! exp_sign_w))) & (! nan_pipe_dffe_1.q));
	exp_result_w[] = ((((! bias_addition_overf_w) & (! exp_sign_w)) & bias_addition_w[]) # ((((bias_addition_overf_w # divbyzero_pipe_dffe_1.q) # nan_pipe_dffe_1.q) # a_is_infinity_dffe_1.q) & overflow_ones_w[]));
	exp_sign_w = bias_addition_result[8..8];
	exp_sub_a_w[] = ( B"0", dataa[30..23]);
	exp_sub_b_w[] = ( B"0", datab[30..23]);
	exp_sub_w[] = exp_sub_result[];
	frac_a_smaller_dffe1_wi = frac_a_smaller_w;
	frac_a_smaller_dffe1_wo = frac_a_smaller_dffe1.q;
	frac_a_smaller_w = cmpr2_alb;
	guard_bit = q_partial_1.result[22..22];
	man_a_adjusted_w[] = man_a_adjusteda_dataout[];
	man_a_dffe1_wi[22..0] = dataa[22..0];
	man_a_dffe1_wo[] = man_a_dffe1_dffe1a[].q;
	man_a_not_zero_w[] = ( (dataa[22..22] # man_a_not_zero_w[21..21]), (dataa[21..21] # man_a_not_zero_w[20..20]), (dataa[20..20] # man_a_not_zero_w[19..19]), (dataa[19..19] # man_a_not_zero_w[18..18]), (dataa[18..18] # man_a_not_zero_w[17..17]), (dataa[17..17] # man_a_not_zero_w[16..16]), (dataa[16..16] # man_a_not_zero_w[15..15]), (dataa[15..15] # man_a_not_zero_w[14..14]), (dataa[14..14] # man_a_not_zero_w[13..13]), (dataa[13..13] # man_a_not_zero_w[12..12]), (dataa[12..12] # man_a_not_zero_w[11..11]), (dataa[11..11] # man_a_not_zero_w[10..10]), (dataa[10..10] # man_a_not_zero_w[9..9]), (dataa[9..9] # man_a_not_zero_w[8..8]), (dataa[8..8] # man_a_not_zero_w[7..7]), (dataa[7..7] # man_a_not_zero_w[6..6]), (dataa[6..6] # man_a_not_zero_w[5..5]), (dataa[5..5] # man_a_not_zero_w[4..4]), (dataa[4..4] # man_a_not_zero_w[3..3]), (dataa[3..3] # man_a_not_zero_w[2..2]), (dataa[2..2] # man_a_not_zero_w[1..1]), (dataa[1..1] # man_a_not_zero_w[0..0]), dataa[0..0]);
	man_b_adjusted_w[] = ( B"1", man_b_dffe1_wo[]);
	man_b_dffe1_wi[22..0] = datab[22..0];
	man_b_dffe1_wo[] = man_b_dffe1_dffe1a[].q;
	man_b_not_zero_w[] = ( (datab[22..22] # man_b_not_zero_w[21..21]), (datab[21..21] # man_b_not_zero_w[20..20]), (datab[20..20] # man_b_not_zero_w[19..19]), (datab[19..19] # man_b_not_zero_w[18..18]), (datab[18..18] # man_b_not_zero_w[17..17]), (datab[17..17] # man_b_not_zero_w[16..16]), (datab[16..16] # man_b_not_zero_w[15..15]), (datab[15..15] # man_b_not_zero_w[14..14]), (datab[14..14] # man_b_not_zero_w[13..13]), (datab[13..13] # man_b_not_zero_w[12..12]), (datab[12..12] # man_b_not_zero_w[11..11]), (datab[11..11] # man_b_not_zero_w[10..10]), (datab[10..10] # man_b_not_zero_w[9..9]), (datab[9..9] # man_b_not_zero_w[8..8]), (datab[8..8] # man_b_not_zero_w[7..7]), (datab[7..7] # man_b_not_zero_w[6..6]), (datab[6..6] # man_b_not_zero_w[5..5]), (datab[5..5] # man_b_not_zero_w[4..4]), (datab[4..4] # man_b_not_zero_w[3..3]), (datab[3..3] # man_b_not_zero_w[2..2]), (datab[2..2] # man_b_not_zero_w[1..1]), (datab[1..1] # man_b_not_zero_w[0..0]), datab[0..0]);
	man_result_dffe_wi[] = man_result_w[];
	man_result_dffe_wo[] = man_result_dffe[].q;
	man_result_mux_select = (((((over_under_dffe_2.q # a_zero_b_not_dffe_4.q) # nan_pipe_dffe_4.q) # b_is_infinity_dffe_4.q) # a_is_infinity_dffe_4.q) # divbyzero_pipe_dffe_4.q);
	man_result_w[] = man_result_muxa_dataout[];
	man_zeros_w[] = B"00000000000000000000000";
	overflow_ones_w[] = B"11111111";
	overflow_underflow = (overflow_w # underflow_w);
	overflow_w = ((bias_addition_overf_w # ((exp_add_output_all_one[7..7] & (! bias_addition_overf_w)) & (! exp_sign_w))) & (((! nan_pipe_dffe_1.q) & (! a_is_infinity_dffe_1.q)) & (! divbyzero_pipe_dffe_1.q)));
	quotient_accumulate_w[] = ( quotient_k_dffe_0a[].q, B"00000000000000", quotient_j_dffe[].q, B"00000000000000");
	quotient_process_cin_w = (round_bit & (guard_bit # sticky_bits[4..4]));
	remainder_j_w[] = ( remainder_sub_0_result[35..0], B"00000000000000", a1_prod.result[34..0], B"000000000000000");
	result[] = ( sign_pipe_dffe_5.q, exp_result_dffe_3a[].q, man_result_dffe_wo[]);
	round_bit = q_partial_1.result[21..21];
	select_bias_out_2_w[] = select_bias_2a_dataout[];
	select_bias_out_w[] = select_biasa_dataout[];
	sticky_bits[] = ( (q_partial_1.result[20..20] # sticky_bits[3..3]), (q_partial_1.result[19..19] # sticky_bits[2..2]), (q_partial_1.result[18..18] # sticky_bits[1..1]), (q_partial_1.result[17..17] # sticky_bits[0..0]), q_partial_1.result[16..16]);
	underflow_w = ((((((! bias_addition_overf_w) & exp_sign_w) # (((! exp_add_output_not_zero[7..7]) & (! bias_addition_overf_w)) & (! exp_sign_w))) & (! nan_pipe_dffe_1.q)) & (! a_zero_b_not_dffe_1.q)) & (! b_is_infinity_dffe_1.q));
	underflow_zeros_w[] = B"00000000";
	value_add_one_w[] = B"001111111";
	value_normal_w[] = B"001111110";
	value_zero_w[] = B"000000000";
END;
--VALID FILE
