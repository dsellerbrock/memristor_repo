component memristor < foundation.electrical.branch
% Memristor
% Models an ideal memristor with a nonlinear dopant drift approach.
%
% The memristance is given by M=x*Ra+(1-x)*Rb, where x is the fraction 
% of the memristor that is in state A, and Ra and Rb are the 
% resistances when the entire memristor is in state A or B, 
% respectively. The memristor state is determined by dx/dt=i*F(x)/Q0, 
% where i is the current from the positive to the negative terminal, Q0 
% is the total charge required for a full transition between states A 
% and B, and F(x) is a window function designed to keep x between 0 and 
% 1.

% Copyright 2015-2017 The MathWorks, Inc.

parameters
    Ra = {1341, 'Ohm'};        % Resistance of state A
    Rb = {111355, 'Ohm'};      % Resistance of state B
    Q0 = {1e-2, 'C'};       % Total charge required for full state transition
    x0 = {0, '1'};          % State A fraction at t=0
    pwindow = {2, '1'};     % Exponent of the window function
end

parameters(Access=private)
    eps1 = {1e-4, '1'};     % Smoothing for the effective xi
    eps2 = {1e-6, 'A'};     % Smoothing for the current crossing zero
end

variables(Access=private)
    xi = {value = x0, priority = priority.high}; % Memristor fraction in state A
    power_dissipated = {0, 'W'};                 % Power dissipated
end

equations
    assert(Ra>0)
    assert(Rb>0)
    assert(Q0>0)
    assert(x0>=0)
    assert(x0<=1)
    assert(mod(pwindow,1)==0)
    assert(pwindow>0)
    let
        M = xi*Ra+(1-xi)*Rb;
        Fg = 1-(1-xi-sqrt(xi^2+4*eps1^2))^(2*pwindow);
        Fl = 1-(xi-sqrt((1-xi)^2+4*eps1^2))^(2*pwindow);
        Fclip = (Fg+Fl)/2+(Fg-Fl)/2*tanh(i/eps2);
    in
        v == i*M;
        xi.der == i/Q0*Fclip;
    end
    power_dissipated == i*v;
end

end